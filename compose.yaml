services:

  web:
    image: nginx
    ports:
      - '127.0.0.1:8080:80'
    volumes:
      - ./nginx/templates:/etc/nginx/templates:ro
    depends_on:
      - backend
      - frontend

  frontend:
    build:
      context: frontend
    environment:
      - NODE_ENV=development
    volumes:
      - ./frontend/yarn.lock:/code/yarn.lock
      - ./frontend/package.json:/code/package.json
      - ./frontend/tsconfig.json:/code/tsconfig.json
      - ./frontend/next.config.ts:/code/next.config.ts
      - ./frontend/next-env.d.ts:/code/next-env.d.ts
      - ./frontend/postcss.config.mjs:/code/postcss.config.mjs
      - ./frontend/public:/code/public
      - ./frontend/README.md:/code/README.md
      - ./frontend/src:/code/src

  backend:
    build:
      context: backend
    user: ${UID}:${GID} # to match bound volumes
    volumes:
      - ./backend:/code
      - ./pgdumps:/pgdumps:ro
    depends_on:
      - postgres
      - redis
    env_file: .env

  celery:
    build:
      context: backend
    env_file: .env
    depends_on:
      - backend
      - postgres
      - redis
    command: celery --app service.background worker --loglevel INFO --events

  beat:
    build:
      context: backend
    env_file: .env
    depends_on:
      - backend
      - postgres
      - redis
    command: celery --app service.background beat --loglevel INFO

  postgres:
    # make sure it's not newer than what pg_restore in the
    # backend container can read.
    image: postgres:15
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_PASSWORD}

  redis:
    image: redis
